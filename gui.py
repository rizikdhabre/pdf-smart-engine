{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff07fb72",
   "metadata": {},
   "outputs": [],
   "source": [
    "import fitz\n",
    "from PyQt6 import QtWidgets\n",
    "from PyQt6.QtWidgets import QApplication, QMainWindow, QFileDialog, QLabel, QPushButton, QComboBox, QVBoxLayout, QWidget, QTextEdit\n",
    "\n",
    "from signature_planner import panels_for_target, plan_signatures, paginate_signature, map_signature_to_global_pages\n",
    "from pdf_utils import render_sheet_to_pdf\n",
    "\n",
    "class BookletMakerGUI(QMainWindow):\n",
    "    def __init__(self):\n",
    "        super().__init__()\n",
    "        self.setWindowTitle(\"A4 -> Booklet (A5/A6/A7) - Prototype\")\n",
    "        self.resize(700, 400)\n",
    "        self.file_path = None\n",
    "        self.src_doc = None\n",
    "\n",
    "        self.label = QLabel(\"No file selected\")\n",
    "        self.combo = QComboBox()\n",
    "        self.combo.addItems([\"A5\", \"A6\", \"A7\"])\n",
    "        self.load_btn = QPushButton(\"Load A4 PDF\")\n",
    "        self.process_btn = QPushButton(\"Create Booklet PDF\")\n",
    "        self.log = QTextEdit()\n",
    "        self.log.setReadOnly(True)\n",
    "\n",
    "        layout = QVBoxLayout()\n",
    "        layout.addWidget(self.label)\n",
    "        layout.addWidget(self.load_btn)\n",
    "        layout.addWidget(QLabel(\"Choose fold target:\"))\n",
    "        layout.addWidget(self.combo)\n",
    "        layout.addWidget(self.process_btn)\n",
    "        layout.addWidget(QLabel(\"Log & Notes:\"))\n",
    "        layout.addWidget(self.log)\n",
    "\n",
    "        container = QWidget()\n",
    "        container.setLayout(layout)\n",
    "        self.setCentralWidget(container)\n",
    "\n",
    "        self.load_btn.clicked.connect(self.load_pdf)\n",
    "        self.process_btn.clicked.connect(self.create_booklet)\n",
    "\n",
    "    def log_msg(self, *args):\n",
    "        self.log.append(\" \".join(str(a) for a in args))\n",
    "\n",
    "    def load_pdf(self):\n",
    "        path, _ = QFileDialog.getOpenFileName(self, \"Open A4 PDF\", filter=\"PDF Files (*.pdf)\")\n",
    "        if not path:\n",
    "            return\n",
    "        try:\n",
    "            doc = fitz.open(path)\n",
    "            p0 = doc.load_page(0)\n",
    "            w, h = p0.rect.width, p0.rect.height\n",
    "            if not (570 <= w <= 620 and 820 <= h <= 860):\n",
    "                self.log_msg(f\"Warning: page size {w:.0f}x{h:.0f} not strict A4\")\n",
    "            self.file_path = path\n",
    "            self.src_doc = doc\n",
    "            self.label.setText(f\"Loaded: {path} — {doc.page_count} pages\")\n",
    "            self.log_msg(f\"Loaded PDF with {doc.page_count} pages\")\n",
    "        except Exception as e:\n",
    "            self.log_msg(\"Failed to open PDF:\", e)\n",
    "\n",
    "    def create_booklet(self):\n",
    "        if not self.src_doc:\n",
    "            self.log_msg(\"Please load a source PDF first.\")\n",
    "            return\n",
    "        target = self.combo.currentText()\n",
    "        panels, panels_per_side = panels_for_target(target)\n",
    "        total_pages = self.src_doc.page_count\n",
    "\n",
    "        self.log_msg(f\"Target: {target} — {panels} panels per sheet ({panels_per_side} per side)\")\n",
    "        sigs = plan_signatures(total_pages)\n",
    "        self.log_msg(\"Signatures chosen:\", sigs)\n",
    "\n",
    "        out_pdf = fitz.open()\n",
    "        current_start = 1\n",
    "        for sig in sigs:\n",
    "            if sig % panels != 0:\n",
    "                pad = panels - (sig % panels)\n",
    "                self.log_msg(f\"Padding signature {sig} with {pad} blank pages\")\n",
    "                sig += pad\n",
    "            local_sheets = paginate_signature(sig, panels)\n",
    "            global_sheets = map_signature_to_global_pages(current_start, sig, local_sheets)\n",
    "\n",
    "            for s in global_sheets:\n",
    "                def fix(lst): return [p if (p != -1 and p <= total_pages) else -1 for p in lst]\n",
    "                rendered = render_sheet_to_pdf(self.src_doc, fix(s['front']), fix(s['back']))\n",
    "                out_pdf.insert_pdf(rendered)\n",
    "                rendered.close()\n",
    "\n",
    "            current_start += sig\n",
    "\n",
    "        save_path, _ = QFileDialog.getSaveFileName(self, \"Save Booklet PDF\", filter=\"PDF Files (*.pdf)\")\n",
    "        if save_path:\n",
    "            out_pdf.save(save_path)\n",
    "            out_pdf.close()\n",
    "            self.log_msg(\"Saved booklet to:\", save_path)\n",
    "            QtWidgets.QMessageBox.information(self, \"Done\", f\"Booklet saved to:\\n{save_path}\")\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
